/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistas;

import controladores.ControladorPedido;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelos.Cliente;
import modelos.Pedido;

/**
 *
 * @author Manuela Gomez
 */
public class VentanaPedidos extends javax.swing.JFrame {

    ControladorPedido controlador;

    /**
     * Creates new form VentanaPedidos
     */
    public VentanaPedidos() {
        initComponents();
        setLocationRelativeTo(this);
        controlador = new ControladorPedido();
        llenarTablaPedido();
        setCbxCliente();
        setCbxFiltro();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblPedidoID = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPedidos = new javax.swing.JTable();
        lblTotal = new javax.swing.JLabel();
        lblCliente = new javax.swing.JLabel();
        btnRegresar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();
        txtTotal = new javax.swing.JTextField();
        cbxCliente = new javax.swing.JComboBox<>();
        cbxFiltro = new javax.swing.JComboBox<>();
        lblPedidoID1 = new javax.swing.JLabel();
        txtFiltro = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblPedidoID.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPedidoID.setForeground(new java.awt.Color(0, 0, 0));
        lblPedidoID.setText("Pedido ID:");

        tablaPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tablaPedidos);

        lblTotal.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(0, 0, 0));
        lblTotal.setText("Total:");

        lblCliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblCliente.setForeground(new java.awt.Color(0, 0, 0));
        lblCliente.setText("Cliente:");

        btnRegresar.setBackground(new java.awt.Color(51, 51, 255));
        btnRegresar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRegresar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegresar.setText("REGRESAR");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        btnBuscar.setBackground(new java.awt.Color(51, 51, 255));
        btnBuscar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setText("BUSCAR");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnActualizar.setBackground(new java.awt.Color(51, 51, 255));
        btnActualizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(51, 51, 255));
        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnRegistrar.setBackground(new java.awt.Color(51, 51, 255));
        btnRegistrar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRegistrar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrar.setText("REGISTRAR");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        cbxFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxFiltroItemStateChanged(evt);
            }
        });

        lblPedidoID1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPedidoID1.setForeground(new java.awt.Color(0, 0, 0));
        lblPedidoID1.setText("Buscar pedido por ID:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnRegresar)
                .addGap(405, 405, 405))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTotal)
                                    .addComponent(lblCliente))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(cbxCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBuscar)
                                .addGap(80, 80, 80))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addComponent(btnActualizar)
                                .addGap(67, 67, 67)
                                .addComponent(btnEliminar)
                                .addGap(99, 99, 99)
                                .addComponent(btnRegistrar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(lblPedidoID)
                                .addGap(45, 45, 45)
                                .addComponent(cbxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(lblPedidoID1)
                                .addGap(18, 18, 18)
                                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 40, Short.MAX_VALUE)))
                .addGap(39, 39, 39))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPedidoID)
                            .addComponent(cbxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPedidoID1)
                            .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBuscar)
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTotal)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCliente)
                            .addComponent(cbxCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addComponent(btnRegresar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnActualizar)
                    .addComponent(btnEliminar)
                    .addComponent(btnRegistrar))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        new VentanaCliente().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        if (txtFiltro.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ingrese el id");
            return;
        }

        int id = Integer.parseInt(txtFiltro.getText().trim());

        DefaultTableModel model = new DefaultTableModel();

        model.setColumnIdentifiers(new Object[]{
            "ID", "Fecha", "Total", "Cliente"
        });

        tablaPedidos.setModel(model);
        Pedido pedido = controlador.seleccionarPedido(id);
        if (pedido != null) {
            model.addRow(new Object[]{
                pedido.getPedidoID(),
                pedido.getFechaPedido(),
                pedido.getTotal(),
                pedido.getCliente().getNombre()
            });

        } else {
            JOptionPane.showMessageDialog(null, "Pedido no encontrado");
            llenarTablaPedido();
        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        if (camposVacios()) {
            JOptionPane.showMessageDialog(null, "Ingrese los datos");
            return;
        }
        float total = Float.parseFloat(txtTotal.getText());
        String nombre = cbxCliente.getSelectedItem().toString();

        Cliente clienteSeleccionado = null;

        for (Cliente cliente : controlador.listarClientes()) {
            if (cliente.getNombre().equals(nombre)) {
                clienteSeleccionado = cliente;
                break;
            }
        }

        try {
            Pedido pedido = new Pedido(total, clienteSeleccionado);
            controlador.editarPedido(pedido);
            JOptionPane.showMessageDialog(null, "Pedido registrado");
            llenarTablaPedido();
            limpiar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Pedido no registrado");
        }


    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        int selected = tablaPedidos.getSelectedRow();
        if (selected >= 0) {

            int id = (int) tablaPedidos.getModel().getValueAt(selected, 0);

            controlador.eliminarPedido(id);
            llenarTablaPedido();
            JOptionPane.showMessageDialog(null, "Pedido eliminado exitosamente");
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un pedido");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        if (camposVacios()) {
            JOptionPane.showMessageDialog(null, "Ingrese los datos");
            return;
        }
        float total = Float.parseFloat(txtTotal.getText());
        String nombre = cbxCliente.getSelectedItem().toString();

        Cliente clienteSeleccionado = null;

        for (Cliente cliente : controlador.listarClientes()) {
            if (cliente.getNombre().equals(nombre)) {
                clienteSeleccionado = cliente;
                break;
            }
        }

        try {
            Pedido pedido = new Pedido(total, clienteSeleccionado);
            controlador.registrarPedido(pedido);
            JOptionPane.showMessageDialog(null, "Pedido registrado");
            llenarTablaPedido();
            limpiar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Pedido no registrado");
        }

    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void cbxFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxFiltroItemStateChanged
        // TODO add your handling code here:
        if (cbxFiltro.getSelectedIndex() != 0) {
            
            String nombre = cbxFiltro.getSelectedItem().toString().trim();
            int idSeleccionado = 0;
            for (Cliente cliente : controlador.listarClientes()) {
                if (cliente.getNombre().equals(nombre)) {
                    idSeleccionado = cliente.getID();
                    break;
                }
            }

            DefaultTableModel modelo = new DefaultTableModel();

            modelo.setColumnIdentifiers(new Object[]{
                "ID", "Fecha", "Total", "Cliente"
            });

            tablaPedidos.setModel(modelo);
            ArrayList<Pedido> pedidos = controlador.listarPedidoPorCliente(idSeleccionado);

            if (!pedidos.isEmpty()) {
                for (Pedido pedido : pedidos) {
                    modelo.addRow(new Object[]{
                        pedido.getPedidoID(),
                        pedido.getFechaPedido(),
                        pedido.getTotal(),
                        pedido.getCliente().getNombre()
                    });
                }
            } else {
                llenarTablaPedido();
                JOptionPane.showMessageDialog(null, "Pedidos no encontrados");
            }
        } else {
            llenarTablaPedido();
        }
    }//GEN-LAST:event_cbxFiltroItemStateChanged
    private boolean camposVacios() {
        return (txtTotal.getText().isEmpty() || cbxCliente.getSelectedIndex() == 0);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> cbxCliente;
    private javax.swing.JComboBox<String> cbxFiltro;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblPedidoID;
    private javax.swing.JLabel lblPedidoID1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tablaPedidos;
    private javax.swing.JTextField txtFiltro;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void llenarTablaPedido() {
        DefaultTableModel model = new DefaultTableModel();

        ArrayList<Pedido> pedidos = controlador.listarTodosLosPedidos();
        model.setColumnIdentifiers(new Object[]{
            "ID", "Fecha", "Total", "Cliente"
        });

        tablaPedidos.setModel(model);

        for (Pedido pedido : pedidos) {
            model.addRow(new Object[]{
                pedido.getPedidoID(),
                pedido.getFechaPedido(),
                pedido.getTotal(),
                pedido.getCliente().getNombre()
            });
        }
    }

    private void limpiar() {
        txtTotal.setText("");
        cbxCliente.setSelectedIndex(0);
    }

    private void setCbxCliente() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        cbxCliente.setModel(model);

        ArrayList<Cliente> clientes = controlador.listarClientes();
        model.addElement("Seleccione un Cliente");

        for (Cliente cliente : clientes) {
            model.addElement(cliente.getNombre()); 
        }
    }
       private void setCbxFiltro() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        cbxFiltro.setModel(model);

        ArrayList<Cliente> clientes = controlador.listarClientes();
        model.addElement("Seleccione un cliente"); 

        for (Cliente cliente : clientes) {
            model.addElement(cliente.getNombre()); 
        }
       }

}
